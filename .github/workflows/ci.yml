name: CI Pipeline
on:
  push:
    branches: [master, main]
jobs:
  unit-test:
    runs-on: ubuntu-latest
    env:
      CI: true
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      STATIC_SITE_BUCKET_PREFIX: ${{ secrets.STATIC_SITE_BUCKET_PREFIX }}/haha8
      region:  ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
    - uses: actions/checkout@v2
    - name: Run Unit Tests
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - run: |
        yarn
        yarn test --watchAll=false
    - if: env.AWS_ACCESS_KEY_ID == null
      run: |
        echo "AWS Credentials not found, This is expected for the first run as the repo is provisioned then secrets are injected at a later step."
        exit 1
  build:
      needs: unit-test
      runs-on: ubuntu-latest
      env:
        CI: true
      strategy:
        matrix:
          include:
          - env: demo
            bucket: ${{ secrets.STATIC_SITE_BUCKET_PREFIX }}
      outputs:
        needs-approval: "${{ steps.needs-approval.outputs.needs-approval }}"
        approved-deploy: "${{ steps.approved-deploy.outputs.approved-deploy }}"
      steps:
        - uses: actions/checkout@v2
        - name: Build Static Site
          uses: actions/setup-node@v1
          with:
            node-version: 14.x
        - run: |
            npm run export
          env:
            REACT_APP_CONFIG: ${{ matrix.env }}
        - name: Upload build artifact to Github
          uses: actions/upload-artifact@v1
          with:
            name: build-artifact-${{ matrix.env }}
            path: out/
        ## This sets `step.outputs` is picked up by `jobs.outputs`, then when the step deploy reads `jobs.outputs`
        ## this provides data and set matrix for the deploy steps. This allows us to specify the data once
        ## and have the subsequence step can pass along the information created during this step.
        # the Deploy step will have a strategy matrix as follows:
        # {
        #   "include": [{
        #     "env": "stage",
        #     "buildName": "build-artifact-stage",
        #     "bucket": "app.mydomain.com"
        #   }]
        # }
        ##
        - name: needs-approval
          id: needs-approval
          if: ${{ matrix.env == 'production' }}
          run: echo "::set-output name=needs-approval::{\"include\":[{\"env\":\"${{ matrix.env }}\",\"buildName\":\"build-artifact-${{ matrix.env }}\",\"bucket\":\"${{ matrix.bucket }}\"}]}"
        - name: approved-deploy
          id: approved-deploy
          if: ${{ matrix.env == 'demo' }}
          run: echo "::set-output name=approved-deploy::{\"include\":[{\"env\":\"${{ matrix.env }}\",\"buildName\":\"build-artifact-${{ matrix.env }}\",\"bucket\":\"${{ matrix.bucket }}\"}]}"
  deploy:
      name: Deploy
      runs-on: ubuntu-latest
      needs: build
      strategy:
        # with `needs` declared, the job will have access to the output of the needed step
        # and in the needed step(`build`) we have the output of what should be instantly deployed
        matrix: ${{ fromJSON(needs.build.outputs.approved-deploy) }}

      steps:
      # Once github action supports nested composite actions (anything `uses` is a composite action)
      # Therefore we cannot reuse the code as a separate composite action until it supports it,
      # current the deploy logic is in this file twice because of it
      ## https://github.com/actions/runner/issues/862
      - uses: actions/checkout@v2
      - name: Configure AWS credentials for S3 sync
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: <% index .Params `region` %>
      - name: Download build artifact from Github
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.buildName }}
          path: build/
      - name: Sync with S3
        shell: bash
        run: |
          cd build
          aws s3 sync . ${{ env.STATIC_SITE_BUCKET_PREFIX }}
      - name: Invalidate Cloudfront
        shell: bash
        run: |
          export DIST_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[?@=='${{ matrix.bucket }}']].Id | [0]" | tr -d '"')
          aws cloudfront create-invalidation --distribution-id ${DIST_ID} --paths "/*"
